------ FE 성능 최적화 ------

FE 성능 최적화

****** 1강. 블로그 사이트 최적화

** Chrome devtools Lighthouse (웹 페이지의 문제점과 문제점을 해결할 수 있는 가이드 제시)
	- Opportunities => 리소스의 관점에서 가이드를 제시해줌. 즉, 로딩 성능 최적화와 연관이 있음
	- Diagnostics => 페이지의 실행 관점에서 가이드 해줌. 즉, 랜더링 성능 최적화와 연관이 있음
	- Serve images that are appropriately-sized to save cellular data and improve load time => 이미지를 적절한 사이즈로 압축해서 너의 데이터를 최적화해라
	- 화면에선 120*120 으로 보여주는데 실제 이미지 사이즈는 1200*1200인 경우... 240*240으로 가져오는게 적절함 (요즘 많이 쓰는 Retina display에서 같은 공간에 더 많은 픽셀을 그릴 수 있기에 너비 기준으로 2배 정도 큰 이미지를 사용하는게 적절)
	- 이미지를 줄이려면 어디서 오는지 확인
	- api를 통해 가져오는 경우 어떻게 줄임? => 이미지 cdn (물리적 거리의 한계를 극복하기 위해 소비자(사용자)와 가까운 곳에 컨탠츠 서버를 두는 기술)
	- image cdn = image processing CDN => 이미지 사이즈 변경 후 보냄 (예시: http://cdn.image.com?src=[img src]&width=200&height=200) 예: imgix.com 사용
	- 해당 강의에선 cdn 안 쓰고 getParametersForUnsplash 함수 씀 (unsplash 에서 제공하는 기능, 이게 image cdn 역할을 해줌)

	- minify javascript => production build하면 주석이나 공백을 자동적으로 제거해줌

** Chrome devtools Lighthouse Diagnostics
	- Minify main-thread works
	- Serve static assets with cache

Bottleneck 해결방안 (예시 화면에선 removeSpecialCharacter 가 호출되면서 그 안의 로직이 병목현상 일으킴)
	- 특수문자를 효율적으로 제거하기 => 1) replace함수와 정규식 사용, 2) 마크다운 특수문자를 지워주는 라이브러리 사용 (remove-markdown)
	- 작업하는 양 줄이기 => 90,000자 이상되는 값 다 넘기지 않기 (썸네일에 표시되는 텍스트만...)

Chunk file 줄이기
	- webpack-bundle-analyzer 쓰기
	- npm install --save-dev cra-bundle-analyzer => npx cra-bundle-analyzer => refractor가 많은 영역을 차지함... 얘는 packege-lock.json에서 확인해보니 react-syntax-highlighter 에 의해 설치된 것인데 얘는 특정 페이지에서만 사용됨... List페이지에선 불필요... 코드 분리 필요
	- Code Splitting을 하기 위해선 웹팩을 건드려야 함... CRA로 했을 경우 이게 자동적으로 되어있음
	- Suspense, lazy 했을 경우 Network탭에서 다른 chunk를 가져오는 것을 확인할 수 있음
	- Enable text compression => 서버로부터 리소스를 받을 때 텍스트 압축을 해서 받아라
	- Network탭에서 실제 데이터 가져오는 api쪽의 [Content-Encoding: gzip] 확인 (gzip이라는 인코딩 방식으로 인코딩 되어있음), 다른 번들 파일들은 텍스트 압축을 하지 않았음
	- GZIP, Deflate 알고리즘을 사용... 압축을 서버에서 해줘야함
	- 모든 파일을 압축하면 클라에서 압축을 풀 때 시간이 걸리기 때문에 어떤것만 하는것이 좋음... 특정 사이드 이상이면 압축


1장 요약: 
	- Lighthouse을 이용한 페이지 검사
	- 이미지 사이즈 최적화
	- Bottleneck코드 최적화
	- Code Splitting
	- 텍스트 압축

--------------------------------------------------------------

****** 2장. 통계 사이트 최적화

애니메이션 분석
	- 초당 60프레임, 즉 초당 60개의 화면... 쟁크(애니메이션 버벅이는 현상) 발생하여 초당 30, 20 프레임으로 떨어짐
	- 브라우저 렌더링 과정 => DOM + CSSOM > Render Tree > Layout > Paint > Composite
	- 브라우저 렌더링 과정 여기서 설명 보기
	- 전체적인 과정을 Critical Rendering Path / Pixel Pipeline이라고 함
	- color가 변경됐을 때 Layout부분이 굳이 실행될 필요가 없음
	- Reflow, Repaint 피하기 (GPU도움받기)... transform, opacity(GPU가 관여할 수 있는 속성) 변경
	- GPU가 직접 가공해서 composite단계로 넘겨줌
	- width로 배경색 제어하면 reflow가 발생하니 transform, opacity로 Reflow, Repaint생략
	- transform으로 조절했을 시 60프레임에 잘 적용되는 모습을 발견할 수 있음 (GPU가 일하기 때문)

LazyLoading, 컴포넌트 Preloading
	- 모달을 클릭하면 모달에 대한 코드를 추가로 로드해야 되기 때문에 또 js를 evaluate하는 시간이 있을거기 때문에 느림
	- Preloading을 통해 버튼을 클릭해서 모달 관련 된 것을 로드하기 전에 모달과 관련된 코드를 로드
	- Preload 타이밍 -> 1. 버튼 위에 마우스를 올려놨을 때, 2. 최초 페이지 로드가 되고, 모든 컴포넌트의 마운트가 끝났을 때
	- 1번 방법은 파일이 너무 클 때 부적절함... 그래서 2번을 선택

이미지 Preloading
	- const img = new Image(); img.src = 'src' 하는 순간 이미지가 로드됨
	- 주의할 점은 img.src = 'src' 같은 src에 요청하면 계속 네트워크 액션이 발생함. 그러면 미리 로드한 의미가 없음...
	- 그래서 내가 사용한 이미지에 캐시가 제대로 걸려있는지 알 필요가 있음... 미리 불러온걸 캐시해서 사용해야함 의미가 있음
	- cache-control: private, max-age = 367 이면 캐시가 367초 걸려있다는 뜻임

2장 요약
	- 애니메이션 최적화 (reflow, repaint) 낮은 fps값을 조정... transform 애니메이션 속성으로 수정
	- bundle analyzer이용... lazy loading이용, 컴포넌트 preloading이용 (lazyWithPreload)
	- 이미지도 이미 로드 const img = new Image(); img.src = 'src';... 필요할 땐 캐시로 가져오기
	- Performance탭에서 노란색은 js실행영역, 보라색은 layout에 대한 작업, 초록색은 paint나 composite에 대한 영역
	- Performance에서 network탭에서 가느다란 왼쪽 선은 네트워크 요청을 보내기 전 커낵션 준비. 보내고 기다리는 시간이 밝은 회색. 실제로 그 컨탠츠를 다운로드 하는 시간이 검은색 블럭. 이후 오른쪽 가느다란 선은 메인 쓰레드에서 다운로드 한 컨탠츠를 처리하는 시간을 나타남
	- Main이라는 탭은 아주 중요

--------------------------------------------------------------

****** 3장. 일반 홈페이지 최적화

홈페이지 분석

이미지 지연 로딩
	- Network탭에서 Disable Cache하고 throttling을 custom으로 6000으로 설정
	- 비디오 리소스가 제일 중요한데 이미지를 먼저 다운로드 받고 이후에 video.mp4 리소스를 다운받음 (그 전엔 pending상태)
	- 이를 해결하기 위해 2가지 방법 (1. 이미지를 빠르게 다운로드, 2. 이미지는 밑에 있으니 나중에 다운로드 될 수 있도록 함 => 동영상 먼저) 2번째 방법이 더 적합
	- 2번째 방법은 이미지가 보여지기 직전 또는 그 순간에 이미지를 다운로드
	- 그러나 스크롤 이벤트를 주면 해당 이벤트 자체가 너무 많이 실행되기에 오히려 성능이 떨어짐
	- 따라서 Intersection Observer을 씀... 이 객체는 매 스크롤마다 이벤트 콜백을 호출하는 것이 아니라 옵저버를 통해서 특정 element를 observe하면 이 요소가 스크롤에 의해서 화면에 보여지는지 안 보여지는지를 판단할 수 있게 됨
	- useRef, observer.observe(ref.current), observer.unobserve(entry.target); 등을 이용해서 구현함

이미지 사이즈 최적화
	- png, jpg, webp
	- png의 경우 무손실 압축으로 꽤나 용량이 큰 이미지임... jpg는 압축을 조금 더 하다보니 용량이 작아지지만 화질이 낮아짐
	- 그래서 보통의 경우 jpg를 사용 권장
	- webp는 구글에서 만든 이미지 포맷... jpg보다 좋음
	- squoosh.app에서 jpg를 webp로 만들기
	- 300*300으로 만들지말고 retina display에서도 깨지지 않게 600*600으로
	- webp를 지원하지 않는 브라우저가 있기에 분기를 칠 필요가 있음 => picture 태그를 이용

동영상 사이즈 최적화
	- 동영상을 압축시킨다는 것은 화질을 저하시키는 것이기 때문에 동영상이 메인이면 하지 않는 것이 좋음
	- 화질과 사이즈 둘 중 하나를 선택해야 함
	- 몇가지 방법: 1. 동영상 길이를 줄이기, 2. 동영상 위에 어떤 패턴들을 넣어 화질이 저하된다는 것을 느끼지 못하게, 

폰트 최적화
	- 메인화면에서만 폰트가 적용되고 나머진 기본 폰트일 때 
	- 웹 폰트의 문제점 FOUT (Flash of unstyled text), FOIT (Flash of invisible text)
	- FOUT는 IE, EDGE에서 발생하고 FOIT는 Chrome, Safari등에서 나타남... 이런 현상들을 최소화 하는 것이 목적
	- 1. 웹 폰트의 적용시점 컨트롤, 2. 폰트 사이즈 줄이기 등의 해결방법이 있다
	- 1번은 font-display 이용
		- auto는 브라우저의 기본 동작
		- block (FOIT, timeout 3s)
		- swap (FOUT)
		- fallback (FOIT, timeout 3s, 3초 이후에도 불러오지 못하면 기본 폰트로 유지, 이후 캐시)
		- optional (FOIT, timeout 0.1s) 이후 네트워크 상황에 따라 기본 폰트로 유지할지 웹폰트로 유지할지 결정, 이후 캐시
		- 구글에서는 기본적으로 optional을 권장함
	- 폰트가 다운로드 되면 opacity 1로 하는 작업도 고려 (font face observer 이용)
	- 폰트 사이즈 줄이기 방법 (1. 웹폰트 포멧 사용, 2. local 포멧 사용, 3. Subset 사용, 4. Unicode Range 적용, 5.data-uri로 변환)
	- TTF/OTF는 압축지 되지 않은 상태에서 PC에서 사용하기 위해 만들어진거... 웹환경으로 넘어오면서 압축해서 WOFF, WOFF2가 생김
	- 변환 사이트에서 변환 후 src: url('./assets/fonts/BMYEONSUNG.woff2') format('woff2'); 로 변경
	- woff2를 지원하지 않는 경우도 대응ㄹ
		src: url('./assets/fonts/BMYEONSUNG.woff2') format('woff2'), 
		url('./assets/fonts/BMYEONSUNG.woff') format('woff'), 
		url('./assets/fonts/BMYEONSUNG.ttf') format('ttf');
	- 이미 자기 컴퓨터에 해당 폰트를 가지고 있다면 컴터에서 불러오면 됨, local('폰트이름') 으로 해결, 우선 서체 관리자에 추가해야 함 ttf파일을
	- 만약에 특정 글자들의 폰트들만 필요한 상황이면 다른 필요없는 글자들은 버려야 함 => 사이트에서 Characters로 필터
	- 만약에 subset폰트파일에서 쓰는 글자가 없는데도 불러오면 네트워크에선 불러오기 때문에 unicode-range를 사용
	- Array.prototype.map.call('ABCDEGIKLMNOPR', c => 'u+' + ('0000' + c.charCodeAt(0).toString(16)).slice(-4)).join(', ')
	- 파일이 작을 경우 다른 페이지 자체에다가 폰트파일을 넣는 방법도 있음, 한번에 불러옴 (data-uri)
	- 폰트 preload방법도 있음
	- font파일도 리소스이기 때문에 빌드하면 파일명에 hash값이 붙여짐. 그래서 빌드된 index.html에서 파일명 변경 (이후 npx serve ./build ) => serve.js library를 통해 ( "serve": "^11.3.2" )
	- preload하면 css보다 먼저 로드됨, 다만 이렇게 빌드할 때마다 파일명 바꾸는건 이상하기에 (CRA이기에 직접 웹팩 변경 못함) react-app-rewired 쓰기
		=> npm install react-app-rewired --save-dev, npm install --save-dev preload-webpack-plugin@3.0.0-beta.3

캐시 최적화 (캐시 - 데이터나 값을 미리 복사해놓는 임시장소나 그런 동작)
	- LightHouse에서 돌려보면 Serve static assets with an efficient cache policy (static asset에 효율적인 캐시 정책이 되어있지 않다 [이미지, 동영상, js, css])
	- Cache에 대한건 Network -> ResponseHeader에서 확인 (Cache-Control이라는 Header가 있어야 함)
	- 브라우저는 2가지 방법으로 캐싱을 함 ( 1. 메모리 캐시, 2. 디스크 캐시 )
	- 서버에서 Cache-Control설정 해줘야 함
	- 설정할 수 있는 부분이 5개
		- no-cache -> 캐시를 사용하기 전에 서버에 검사 후 (사용 가능한지 서버에 물어봄) 사용 결정 => no-cache =0 이랑 같음... 0이어도 브라우저가 가지고있음 만료됐다고 바로 서버에서 가져오는게 아니라 서버에 물어보고 사용결정
		- no-store -> 캐시 사용 안함
		- public -> 모든 환경에서 캐시 사용 가능
		- private -> 브라우저 환경에서만 캐시 사용, 외부 캐시 서버에서는 사용 불가
		- max-age -> 캐시의 유효시간
	- 304 => not modified => 서버에서 바뀐게 없다고 말했음
	- 서버는 우리가 가지고 있는 캐시 데이터가 서버의 최신 데이터와 같은지 어떻게 알 수 있을까? => 네트워크에서 ETag로 판별 => 리소스에 대한 hash... 서버에서 내려줌
	- 브라우저는 이미지 자체를 보내는게 아니라 ETag를 보냄... 다르면 서버에서 보내줌
	- 리소스별로 캐시 적용하는 게 필요함
	- html은 no-cache, js와 css는 안해도 됨... 웹팩을 이용해 빌드하면 js파일명에 해시가 적용되어 있으니 항상 최신 파일임 (html만 최신이면 됨)
	- 그래서 js는 max-age 무한으로 함 (일주일, 한달)
	- 이미지가 자주 바뀌는거면 해시 적용 아니면 캐시적용
	- html => no-cache, js,css,img => public, max-age=31536000 (1년) 

불필요한 css제거
	- lighthouse에서 검사 => Reduce unused CSS => TransferSize - Potential Savings(제거하면 이정도를 save가능) = 실제로 쓰는 css 사이즈
	- Coverage 열어서 확인
	- 더블클릭하면 Source탭에 사용되는/사용되지않는 소스 표시 (빨간색이 많으면 안됨)
	- 사용하지 않는건 purgecss로 제거
	- "purge": "purgecss --css ./build/static/css/*.css --output ./build/static/css/ --content ./build/static/js/*.js" --> 검사 후 파일 엎어치기



--------------------------------------------------------------

****** 4장. 이미지 갤러리 최적화

Layout shift 피하기
	- LightHouse에서 레이아웃 이동이 얼마나 발생하는지를 나타내는 지료포 CLS (Cumulative Layout Shift)라는 항목을 두고 성능 점수에 포함시킴
	- CLS를 통해 Layout shift가 얼마나 발생하는지 알 수 있음 (0이면 none, 1이면 심한 상태)
	- Layout shift 원인
		- 사이즈가 미리 정의되지 않은 이미지 요소
		- 사이즈가 미리 정의되지 않은 광고 요소
		- 동적으로 삽입된 콘텐츠
		- 웬 폰트 (FOIT, FOUT)
	- 브라우저는 이미지를 다운로드하기 전까지 이미지 사이즈가 어떤지 알 수 없으니 미리 해당 영역을 확보할 수 없음, 화면에 표시되기 전까지 높이(또는 너비)가 0임
	- 해결방법: 해당 요소의 사이즈를 미리 예측할 수 있다면 또는 알고 있다면 해당 사이즈만큼 공간 확보
		- 하지만 이미지 갤러리의 이미지 사이즈는 브라우저의 가로 사이즈에 따라 변함
		- 너비와 높이를 고정하는 것이 아니라 이미지의 너비, 높이 비율로 공간을 잡아두기... 여기에선 16:9
		- 이미지 크기를 비율로 설정하는 방법은 2가지... 1: padding을 이용하여 박스를 만든 뒤 그 안에 이미지를 absolute로 띄우는 방식
			- wrapper에 width: 160px; padding-top: 56.25%; /* 16:9 비율 */ => 160px의 56.25만큼 상단 여백이 설정되고 높이는 90px로 됨
			- 이 상태에서 이미지를 absolute로 넣어주면 부모 요소인 div와 사이즈가 동일하게 맞춰짐... 1:1비율로 표시해야 한다면 padding-top: 100%;
			- 단 padding을 이용하면 퍼센트를 매번 계산해야 하기에 aspect-radio css속성 이용... 자식 요소인 이미지에 absolute적용할 필요가 없음, 단 브라우저 호환성은 체크
			- wrapper에 width: 100%; aspect-ratio: 16 / 9; 하고 image엔 width:100%; height: 100%;

이미지 지연 로딩 (react-lazyload)
	- IntersectionObserver대신 이걸 사용 (빠르게 개발하기 위해)... npm i react-lazyload
	- IntersectionObserver은 해당 api를 사용하는건데 react-lazyload는 스크롤 이벤트로 작동
	- 단 스크롤 햇을 때 이미지가 로드되는게 거슬린다면 offset이용 => 화면 밑 {offset}px 만큼 이미지 로드

useSelect 렌더링 문제 해결
	- React Developer Tools 설치
	- Components 톱니바퀴에 Highlight updates when components render 체크
	- 모달만 변경되는 건데 뒤에 이미지들도 같이 리랜더링 되는 것을 볼 수 있음... 리덕스 때문...
		- 리덕스 상태를 구독하고 있는 컴포넌트는 리덕스 상태 변화에 따라 불필요하게 리렌더링 될 수 있음 (관련 없는게 바껴도 리덕스가 바뀌었으니 리렌더링)
		- useSelector 동작 방식 때문.. useSelector는 서로 다른 상태를 참조할 때는 리렌더링을 하지 않도록 구현되어 있음
		- 하지만 그 판단 기준이 useSelector에 인자로 넣은 함수의 반환 값임... 반환 값이 이전 값과 같다면 해당 컴포넌트는 리덕스 사애 변화에 영향이 없다고 판단하여 리렌더링을 하지 않고
		  반환 값이 이전 값과 다르면 영향이 있다고 판단하여 리렌더링을 함

const { photos, loading } = useSelector(state => ({
    photos:
      state.category.category === 'all'
        ? state.photos.data
        : state.photos.data.filter(
            photo => photo.category === state.category.category
          ),
    loading: state.photos.loading,
}));

	- 위 소스는 객체를 새로 만들어서 새로운 참조 값을 반환하는 형태이므로 useSelector는 리덕스를 통해 구독한 값이 변했다고 판단.
	- 따라서 useSelector를 사용할 때 함수가 객체 형태를 반환하게 하면 매번 새로운 값으로 인지하여 상관없는 리덕스 상태 변화에도 리렌더링이 발생
	- 해결방법: 1. 객체를 새로 만들지 않도록 반환 값을 나누는 방법, 2. Equality Function 사용
	- 1 => const src = useSelector(state => state.imageModal.src);
	- 2 => Equality Function이란 useSelector의 옵션으로 넣는 함수로, 리덕스 상태가 변했을 때 useSelector가 반환해야 하는 값에도 영향을 미쳤는지 판단하는 함ㅁ수
		   이전 값과 현재 반환 값을 비교하는 함수

import { shawllowEqual } from 'react-redux'
const { modalVisible, bgColor, src, alt } = useSelector(state => ({
    modalVisible: state.imageModal.modalVisible,
    bgColor: state.imageModal.bgColor,
    src: state.imageModal.src,
    alt: state.imageModal.alt,
}), shallowEqual);

Redux Reselect를 통한 렌더링 최적화

  const { category, allPhotos, loading } = useSelector(
    state => ({
      category: state.category.category,
      allPhotos: state.photos.data,
      loading: state.photos.loading,
    }),
    shallowEqual
  );

  const photos =
    category === 'all' ? allPhotos : allPhotos.filter(photo => photo.category === category);

	- 이렇게 코드를 작성하면 문제점이 지금은 3fields만 있어 문제없어 보이지만 많아지면 모달과 관련없는데 예상치 못하게 리렌더링이 발생하고 category는 단순 필터 역할만 할 뿐이라 크게 모달 랜더링에 필요하지 않음
	- 이런 문제를 해결하기 위해 Reselect
	- state에 있는 값들을 가지고 가공해야 되는 상황... 가공된 값을 useSelect로직안에서 처리할 수 있게 만들어줌
	- 원래 useSelector에 filter을 넣으면 shallowEqual이 있어도 filter 때문에 새로운 객체가 반환되어 제대로 작동안했음. Reselect는 이런 filter로직도 넣어도 문제가 발생하지 않게끔 해줌
	- npm i reselect 후 createSelector
	- selector은 store에서 데이터 꺼내오기 위한 함수인데 이걸 reselector로 만듦
	-   // selectCreatedPhotos가 photos데이터를 가지고 있는게 아니라 이걸 useSelector안에서 사용하게 도면 photos를 가져오게 됨
        const selectCreatedPhotos = createSelector([state => state.photos.data], photos => photos);
        const photos = useSelector(selectCreatedPhotos);
    - 이건 Memoization기법 사용... createSelector은 parameter값들에 따른 변화가 있으면 함수를 실행하고 그게 아니면 미리 캐시하고 있던 값을 다시 뱉어줌 

병목 함수에 memoization적용
	- modal background color 함수 자체를 개선하는 방법 또는 로직을 수정할 수 없을 때 한번 들어갔던 건 저장해놓고 다음에 들어갈 때 저장된 것을 사용
	- 함수 계산값을 저장하는 변수 선언 후 그런 값이 있으면 기존에 있는 값을 반환, 없으면 계산 후 저장 + 리턴
